.TH RUSH-SKL "1" "January 2015" "v1.0" "SKL"
.TP NAME
\fBClasses\fR : \fIChar\fR, \fIInt\fR, \fIFloat\fR
.SH SYNOPSIS
.TP
\fBObject *new(Class *\fIclass\fR, \fI...\fB);\fR
Create an object of type \fIclass\fR and return it. Raise an error if alloc is impossible. Custom values can be given to the parameter using \fI...\fR. Each object created with \fBnew()\fR has to be destroyed with \fBdelete()\fR.
.TP
\fBvoid delete(Object *\fIptr\fB);\fR
Delete the object pointed by \fIptr\fR.
.TP
\fBvoid const *str(Object *\fR\fIself\fB);\fR
Return a string to the form \fB"<\fIname\fB (\fIint\fB, \fI...\fB)>"\fR. Note that this is string has been dynamically allocated. You have to free it.
.TP
\fBObject add(const Object *\fIself\fB, const Object *\fIother\fB);\fR
Return a new object that corresponds to an addition of \fIself\fR and \fIother\fR. This new object has to be destructed after usage. Note that \fIself\fR and \fIother\fR have to be the same type.
.TP
\fBObject sub(const Object *\fIself\fB, const Object *\fIother\fB);\fR
Return a new object that corresponds to a substraction of \fIself\fR and \fIother\fR. This new object has to be destructed after usage. Note that \fIself\fR and \fIother\fR have to be the same type.
.TP
\fBObject mul(const Object *\fIself\fB, const Object *\fIother\fB);\fR
Return a new object that corresponds to a multiplication of \fIself\fR and \fIother\fR. This new object has to be destructed after usage. Note that \fIself\fR and \fIother\fR have to be the same type.
.TP
\fBObject div(const Object *\fIself\fB, const Object *\fIother\fB);\fR
Return a new object that corresponds to a division of \fIself\fR and \fIother\fR. This new object has to be destructed after usage. Note that \fIself\fR and \fIother\fR have to be the same type.
.TP
\fBint eq(const Object *\fIself\fB, const Object *\fIcmp\fB);\fR
Return \fI1\fR if \fIself\fR is equal to \fIcmp\fB ; return \fI0\fR in other cases.
.TP
\fBint lt(const Object *\fIself\fB, const Object *\fIcmp\fB);\fR
Return \fI1\fR if \fIself\fR is lower than \fIcmp\fB ; return \fI0\fR in other cases.
.TP
\fBint gt(const Object *\fIself\fB, const Object *\fIcmp\fB);\fR
Return \fI1\fR if \fIself\fR is greater than \fIcmp\fB ; return \fI0\fR in other cases.
.TP
\fBvoid popfront(ListClass *\fIlist\fB);\fR
Remove the first element of the list \fIlist\fB.
.TP
\fBvoid popback(ListClass *\fIlist\fB);\fR
Remove the last element of the list \fIlist\fB.
.TP
\fBvoid pushfront(ListClass *\fIlist\fB, Object *\fInew\fB);\fR
Create a new element and add it at the beginning of the list \fIlist\fR. The new element has the value of \fInew\fR.
.TP
\fBvoid pushback(ListClass *\fIlist\fB, Object *\fInew\fB);\fR
Create a new element and add it at the end of the list \fIlist\fR. The new element has the value of \fInew\fR.
.SH ITERATORS
.PP Some custom iterators are defined. They are the following :
.TP
\fBObject* begin(Object *\fIlist\fB);\fR
Create a new iterator that iterate on \fIlist\fR. Each iterator created with \fBbegin()\fR has to be destroyed with \fBend()\fR.
.TP
\fBObject* end(Object *\fIlist\fB);\fR
Delete the iterator that iterate on \fIlist\fR.
.TP
\fBvoid incr(Object *\fIit\fB);\fR
Increment the iterator \fIit\fR.
.TP
\fBvoid decr(Object *\fIit\fB);\fR
Decrement the iterator \fIit\fR.
.TP
\fBvoid lt(Object *\fIit\fB, Object *\fIcmp\fB);\fR
Return \fItrue\fR if iterator \fIit\fR is lower than \fIcmp\fR ; return \fIfalse\fR in other cases.
.TP
\fBvoid gt(Object *\fIit\fB, Object *\fIcmp\fB);\fR
Return \fItrue\fR if iterator \fIit\fR is greater than \fIcmp\fR ; return \fIfalse\fR in other cases.
.TP
\fBvoid eq(Object *\fIit\fB, Object *\fIcmp\fB);\fR
Return \fItrue\fR if iterator \fIit\fR is equal to \fIcmp\fR ; return \fIfalse\fR in other cases.
.SH BONUSES
.PP
There is a decrement interator. Functions \fBpopback\fR, \fBpopfront\fR, \fBpushback\fR, \fBpushfront\fR are also available to manage lists.
.SH BUGS
.PP
No known bug.
.br
Report SKL bugs to broggi_t@epitech.eu, duques_g@epitech.eu, kalatz_a@epitech.eu or poulet_a@epitech.eu
.SH AUTHOR
.PP
Written by broggi_t, duques_g, kalatz_a and poulet_a.
